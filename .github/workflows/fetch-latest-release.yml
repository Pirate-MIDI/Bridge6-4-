on:
  repository_dispatch:
    types:
    - release
  
jobs:
  publishRelease:
    runs-on: ubuntu-latest
    steps:
      - name: Request All Releases
        id: requestAllReleases
        run: |
          curl \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.RELEASE_TOKEN }}" \
          https://api.github.com/repos/Pirate-MIDI/Bridge/releases -o release.json
          
      - name: JSON to Variables Release
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: 'release.json'
          prefix: release
          
      - name: Create New Assets Folder
        run: mkdir ./assets
        
      - name: Download Release Assets
        if: contains(env.release_0_name, 'alpha') != true
        id: downloadAssets
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: 'Pirate-MIDI/Bridge'
          version: 'tags/${{env.release_0_tag_name}}'
          file: "bridge"
          regex: true
          target: 'assets/'
          token: ${{ secrets.RELEASE_TOKEN }}
          
      - name: Echo Downloaded Assets
        run: ls assets
        
      - name: Create Mirror Release
        if: contains(env.release_0_name, 'alpha') != true
        id: createRelease
        run: |
          curl \
          -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.RELEASE_TOKEN }}" \
          https://api.github.com/repos/Pirate-MIDI/Pirate-MIDI-Features-Bug-Tracking/releases \
          -d '{"tag_name":"${{env.release_0_tag_name}}","target_commitish":"main","name":"${{env.release_0_name}}","body":${{toJson(env.release_0_body)}},"draft":false,"prerelease":false,"generate_release_notes":false}' -o newRelease.json
      
      - name: JSON to Variables New Release
        uses: antifree/json-to-variables@v1.0.1
        with:
          filename: 'newRelease.json'
          prefix: newRelease
      
      - name: Upload Release Asset
        if: contains(env.release_0_name, 'alpha') != true
        id: uploadReleaseAsset
        uses: AButler/upload-release-assets@v2.0
        with:
          files: 'assets/*.bin'
          repo-token: ${{ secrets.RELEASE_TOKEN }}
          release-tag: "${{env.newRelease_tag_name}}"
          
      - name: Deploy to Release server
        if: contains(env.release_0_name, 'alpha') != true && contains(env.release_0_name, 'beta') != true
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: "-rltgoDzvO"
          SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
          EXCLUDE: "/dist/, /node_modules/"
      
      - name: Post Beta Announcement
        if: contains(env.release_0_name, 'beta')
        id: slackBeta
        uses: slackapi/slack-github-action@v1.19.0
        with:
          # Slack channel id, channel name, or user id to post message.
          # See also: https://api.slack.com/methods/chat.postMessage#channels
          channel-id: 'C03HC5W3M7F'
          # For posting a rich message using Block Kit
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Check out the new release <${{ env.newRelease_html_url }}|${{ env.newRelease_name }}>*"
                  },
                  "type": "section",
                  "text": {
                    "type": "text",
                    "text": ${{ toJson(env.newRelease_body) }}
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        
